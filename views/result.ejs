<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <title><%= title %></title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" crossorigin='anonymous'>
        <link rel='stylesheet' href='/stylesheets/style.css'/>
        <script type="text/javascript" src="https://www.google.com/jsapi"></script>
        <!-- <script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <link rel="stylesheet" href="https://cdn.datatables.net/t/bs-3.3.6/jqc-1.12.0,dt-1.10.11/datatables.min.css"/> 
        <script src="https://cdn.datatables.net/t/bs-3.3.6/jqc-1.12.0,dt-1.10.11/datatables.min.js"></script> -->
        <script type="text/javascript">
            google.load('visualization', '1', {packages:['table']});
            google.setOnLoadCallback(drawDocumentSearchResultTable);
            
            function drawDocumentSearchResultTable() {
                // テーブルの設定
                let data = new google.visualization.DataTable();
                data.addColumn('string','<%- head.vars[0] %>'); // ejsで渡されたデータを呼び込み，呼び込んだ結果を''でstringにする
                data.addColumn('string','<%- head.vars[1] %>');
                data.addColumn('string','<%- head.vars[2] %>');
                data.addColumn('string','<%- head.vars[3] %>');
                
                // JSONで取得したデータを整形する
                let rows = <%- JSON.stringify(results.bindings) %>; // ejsで渡されたデータを呼び込む
                let addRows = [];
                let files = [];
                for(let i = 0; i < rows.length; i++){
                    let file = rows[i].file ? rows[i].file["value"] : null ;
                    files.push(file);
                    let headline = rows[i].headline ? rows[i].headline["value"] : null ;
                    let anchorText = rows[i].anchorText ? rows[i].anchorText["value"] : null ;
                    let entity = rows[i].entity ? rows[i].entity["value"] : null ;
                    let row = [file, headline, anchorText, entity];
                    addRows.push(row);
                };
                data.addRows(addRows);

                let options = {
                    title: 'Search Results: "<%= keyword %>"',
                    page: 'enable', // ページ分割を有効
                    pageSize: 5,    // 1 ページの項目数
                    showRowNumber: true,
                    allowHtml: true,
                };
                
                let formatter = new google.visualization.PatternFormat('<a href="{3}">{3}</a>');
                formatter.format(data, [3,0,1,3]);
                
                let table = new google.visualization.Table(document.getElementById('result'));
                table.draw(data, options);

                // 関係情報取得のためのボタンを設置する //

                html = 
                `
                <form id='retrieve_people'>
                    <input type="hidden" name="files" id="files" value=` + files + `>
                    <input type='button' value='Relevant People' class='btn btn-primary' onclick="clickBtn1()">
                    <input type='button' value='Relevant Entities' class='btn btn-primary' onclick="clickBtn2()">
                </form>
                <div id='retrieve_people_result'>
                </div>
                `;

                document.getElementById('result').insertAdjacentHTML('afterend', html);

            };
        </script>
        <script>
            async function clickBtn1(){
                const files = document.getElementById('files').value;
                // console.log(files);
                // console.log(typeof files);
                let data = { 'files' : files };
                await postData("/search/result/api/person", data )
                    .then(function(response1) { //成功時に実行される
                        console.log("status=" + response1.status); //status=200
                        return response1.json();
                    })
                    .then(function(data1) { //成功時に実行される
                        console.log(data1); //確認のため

                        // テーブル作成
                        google.load('visualization', '1', {packages:['table']});
                        google.setOnLoadCallback(drawPeopleResultTable(data1));

                    })
                    .catch(function(err1) { //失敗時に実行される
                        console.log("err=" + err1);
                    });
                };

            async function postData(url = '', data = {}) {
                const response = await fetch(url, {
                    method: 'POST', // *GET, POST, PUT, DELETE, etc.
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(data) // 本文のデータ型は "Content-Type" ヘッダーと一致する必要があります
                    })
                return response;
                };

            function drawPeopleResultTable(json) {
                // テーブルの設定
                let data = new google.visualization.DataTable();
                data.addColumn('string',json.head.vars[0]); // ejsで渡されたデータを呼び込み，呼び込んだ結果を''でstringにする
                data.addColumn('string',json.head.vars[1]);
                
                // JSONで取得したデータを整形する
                let rows = json.results.bindings; // ejsで渡されたデータを呼び込む
                let addRows = [];
                for(let i = 0; i < rows.length; i++){
                    let fromWho = rows[i].fromWho ? rows[i].fromWho["value"] : null ;
                    let toWho = rows[i].toWho ? rows[i].toWho["value"] : null ;
                    let row = [fromWho, toWho];
                    addRows.push(row);
                };
                data.addRows(addRows);

                let options = {
                    page: 'enable', // ページ分割を有効
                    pageSize: 5,    // 1 ページの項目数
                    showRowNumber: true,
                    allowHtml: true,
                };
                
                let table = new google.visualization.Table(document.getElementById('retrieve_people_result'));
                table.draw(data, options);

                // 選択した行の値を取得する
                google.visualization.events.addListener(table, 'select', function() { // 参考情報: https://developers.google.com/chart/interactive/docs/reference#visgetselection
                    let selection = table.getSelection(); // 選択したものが取得される
                    let selected_cells = [];
                    for (let i=0; i < selection.length; i++){
                        let item = selection[i];
                        let values = {
                                "fromWho": data.getValue(item.row, 0),
                                "toWho": data.getValue(item.row,1),
                            };
                        selected_cells.push(values);
                    }
                    if (selected_cells == []) {
                        selected_cells = 'nothing';
                    }
                    console.log(selected_cells);
                });
            };
        </script>
    </head>
    <body id='container'>
        <!-- サービス名 -->
        <header>
            <h1 class='display-4'>
                <%= title %>
            </h1>
        </header>
        <!-- 文書検索機能 -->
        <section id='search'>
            <h4 class="text text-primary">
                Input Keywords
            </h4>
            <form method='post' action='/search/result'>
                <div class="form-group">
                    <% let saved_keyword = keyword %>
                    <input type='text' name='keyword' id='keyword' value='<%= saved_keyword %>' class='form-control'>
                </div>
                <input type='submit' value='Search' class='btn btn-primary'>
            </form>
        </section>
        <!-- 文書検索結果 -->
        <h2 class="text text-success"> Search Results: "<%= saved_keyword %>" </h2>
        <section id='result'>
        </section>
    </body>
</html>